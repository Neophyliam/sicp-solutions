(define (make-deque) (cons '() '()))

(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))

(define (set-front-ptr! deque item)
  (set-car! deque item))
(define (set-rear-ptr! deque item)
  (set-cdr! deque item))

(define (empty-deque? deque)
  (null? (front-ptr deque)))

(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (car (front-ptr deque))))

(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "REAR called with an empty deque" deque)
      (car (rear-ptr deque))))

;; (item . (next . prev))
(define (front-insert-deque! deque item)
  (let ((new-pair (cons item (cons '() '()))))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
            (set-cdr! (cdr (front-ptr deque)) new-pair)
            (set-car! (cdr new-pair) (front-ptr deque))
            (set-front-ptr! deque new-pair)
            deque))))

;; (item . (next . prev))
(define (rear-insert-deque! deque item)
  (let ((new-pair (cons item (cons '() '()))))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
            (set-car! (cdr (rear-ptr deque)) new-pair)
            (set-cdr! (cdr new-pair) (rear-ptr deque))
            (set-rear-ptr! deque new-pair)
            deque))))

(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        (else
          (set-front-ptr! deque (cadr (front-ptr deque)))
          (if (null? (front-ptr deque))
              (begin (set-rear-ptr! deque '()) deque)
              (begin (set-cdr! (cdr (front-ptr deque)) '())
                     deque)))))

(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        (else
          (set-rear-ptr! deque (cddr (rear-ptr deque)))
          (if (null? (rear-ptr deque))
              (begin (set-front-ptr! deque '()) deque)
              (begin (set-car! (cdr (rear-ptr deque)) '())
                     deque)))))

(define (println x)
  (display x)
  (newline))

(define (print-deque deque)
  (define (iter item)
    (cond ((null? (cadr item))
           (display (car item))
           (println ")"))
          (else
            (display (car item))
            (display " ")
            (iter (cadr item)))))
  (if (empty-deque? deque)
      (println "()")
      (begin (display "(")
             (iter (front-ptr deque)))))


;; test
(define deq1 (make-deque))
(print-deque deq1)
(front-insert-deque! deq1 'a)
(print-deque deq1)
(rear-insert-deque! deq1 'b)
(print-deque deq1)
(front-insert-deque! deq1 'A)
(print-deque deq1)
(rear-insert-deque! deq1 'B)
(print-deque deq1)
(rear-delete-deque! deq1)
(print-deque deq1)
(front-delete-deque! deq1)
(print-deque deq1)
(front-delete-deque! deq1)
(print-deque deq1)
(rear-delete-deque! deq1)
(print-deque deq1)
(front-insert-deque! deq1 'a)
(print-deque deq1)
(rear-insert-deque! deq1 'b)
(print-deque deq1)

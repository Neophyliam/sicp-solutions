(define (make-account balance passwd)
  (let ((wrong-times 0))
      (define (withdraw amount)
        (if (>= balance amount)
            (begin (set! balance (- balance amount))
                   balance)
            "Insufficient funds"))
      (define (deposit amount)
        (set! balance (+ balance amount))
        balance)
      (define (call-the-cops x) "The cops will be here in minutes.")
      (define (dispatch secret method)
        (if (eq? secret passwd)
            (begin (set! wrong-times 0)
                (cond ((eq? method 'withdraw) withdraw)
                      ((eq? method 'deposit) deposit)
                      (else
                        (error "Unknown request -- MAKE-ACCOUNT" method))))
            (if (<= wrong-times 5)
                (begin (set! wrong-times (+ wrong-times 1))
                       (lambda (x) "Incorrect password"))
                call-the-cops)))
      dispatch))


;; test
(define (println x)
  (display x)
  (newline))

(define acc (make-account 100 'secret-password))

(println ((acc 'secret-password 'withdraw) 40))
(println ((acc 'secret-password 'deposit) 40))
(println ((acc 'some-other-password 'deposit) 50))
(println ((acc 'some-other-password 'deposit) 50))
(println ((acc 'some-other-password 'deposit) 50))
(println ((acc 'some-other-password 'deposit) 50))
(println ((acc 'some-other-password 'deposit) 50))
(println ((acc 'some-other-password 'deposit) 50))
(println ((acc 'some-other-password 'deposit) 50))
(println ((acc 'some-other-password 'deposit) 50))
(println ((acc 'secret-password 'deposit) 40))
(println ((acc 'secret-password 'deposit) 40))
(println ((acc 'secret-password 'deposit) 40))
